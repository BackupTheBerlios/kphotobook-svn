// This file is generated by kconfig_compiler from settings.kcfg.
// All changes you do to this file will be lost.
#ifndef SETTINGS_H
#define SETTINGS_H

#include <kconfigskeleton.h>

class Settings : public KConfigSkeleton
{
  public:
    class EnumGeneralViewMode
    {
      public:
      enum type { IDEAlMode, TabPageMode, COUNT };
    };
    class EnumTagTreeFilterOperator
    {
      public:
      enum type { And, Or, COUNT };
    };
    class EnumImagePreviewSelectionMode
    {
      public:
      enum type { Extended, Multi, COUNT };
    };

    static Settings *self();
    ~Settings();

    /**
      Set Defines the mdi view mode.
    */
    static
    void setGeneralViewMode( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "GeneralViewMode" ) ))
        self()->mGeneralViewMode = v;
    }

    /**
      Get Defines the mdi view mode.
    */
    static
    int generalViewMode()
    {
      return self()->mGeneralViewMode;
    }

    /**
      Set Defines if the filesystem is rescanned while starting up KPhotoBook.
    */
    static
    void setGeneralRescanWhileStartup( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "GeneralRescanWhileStartup" ) ))
        self()->mGeneralRescanWhileStartup = v;
    }

    /**
      Get Defines if the filesystem is rescanned while starting up KPhotoBook.
    */
    static
    bool generalRescanWhileStartup()
    {
      return self()->mGeneralRescanWhileStartup;
    }

    /**
      Set Should a check be performed on exit, if images without tags are in the database?.
    */
    static
    void setGeneralCheckUntaggedOnExit( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "GeneralCheckUntaggedOnExit" ) ))
        self()->mGeneralCheckUntaggedOnExit = v;
    }

    /**
      Get Should a check be performed on exit, if images without tags are in the database?.
    */
    static
    bool generalCheckUntaggedOnExit()
    {
      return self()->mGeneralCheckUntaggedOnExit;
    }

    /**
      Set The size of the icons in the ToolBar of the TagTree.
    */
    static
    void setTagTreeToolBarIconSize( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "TagTreeToolBarIconSize" ) ))
        self()->mTagTreeToolBarIconSize = v;
    }

    /**
      Get The size of the icons in the ToolBar of the TagTree.
    */
    static
    int tagTreeToolBarIconSize()
    {
      return self()->mTagTreeToolBarIconSize;
    }

    /**
      Set The size of the icons in the TagTree.
    */
    static
    void setTagTreeIconSize( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "TagTreeIconSize" ) ))
        self()->mTagTreeIconSize = v;
    }

    /**
      Get The size of the icons in the TagTree.
    */
    static
    int tagTreeIconSize()
    {
      return self()->mTagTreeIconSize;
    }

    /**
      Set The font used in the TagTree.
    */
    static
    void setTagTreeFont( const QFont & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "TagTreeFont" ) ))
        self()->mTagTreeFont = v;
    }

    /**
      Get The font used in the TagTree.
    */
    static
    QFont tagTreeFont()
    {
      return self()->mTagTreeFont;
    }

    /**
      Set Defines if the icons in the TagTree are shown.
    */
    static
    void setTagTreeShowIcons( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "TagTreeShowIcons" ) ))
        self()->mTagTreeShowIcons = v;
    }

    /**
      Get Defines if the icons in the TagTree are shown.
    */
    static
    bool tagTreeShowIcons()
    {
      return self()->mTagTreeShowIcons;
    }

    /**
      Set Should Treenodes, that match an image be drawn bold?
    */
    static
    void setTagTreeBoldMatches( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "TagTreeBoldMatches" ) ))
        self()->mTagTreeBoldMatches = v;
    }

    /**
      Get Should Treenodes, that match an image be drawn bold?
    */
    static
    bool tagTreeBoldMatches()
    {
      return self()->mTagTreeBoldMatches;
    }

    /**
      Set Should only collapsed Treenodes be drawn bold when the match an image?
    */
    static
    void setTagTreeBoldMatchesCollapsedOnly( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "TagTreeBoldMatchesCollapsedOnly" ) ))
        self()->mTagTreeBoldMatchesCollapsedOnly = v;
    }

    /**
      Get Should only collapsed Treenodes be drawn bold when the match an image?
    */
    static
    bool tagTreeBoldMatchesCollapsedOnly()
    {
      return self()->mTagTreeBoldMatchesCollapsedOnly;
    }

    /**
      Set Defines the operator when filtering images by the TagTree.
    */
    static
    void setTagTreeFilterOperator( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "TagTreeFilterOperator" ) ))
        self()->mTagTreeFilterOperator = v;
    }

    /**
      Get Defines the operator when filtering images by the TagTree.
    */
    static
    int tagTreeFilterOperator()
    {
      return self()->mTagTreeFilterOperator;
    }

    /**
      Set Defines if the filter of string tags uses regular expressions or wildcards.
    */
    static
    void setTagTreeFilterRegexp( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "TagTreeFilterRegexp" ) ))
        self()->mTagTreeFilterRegexp = v;
    }

    /**
      Get Defines if the filter of string tags uses regular expressions or wildcards.
    */
    static
    bool tagTreeFilterRegexp()
    {
      return self()->mTagTreeFilterRegexp;
    }

    /**
      Set Defines if the state of the TagTree (opened/closed nodes) is remebered (stored/restored).
    */
    static
    void setTagTreeRememberTree( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "TagTreeRememberTree" ) ))
        self()->mTagTreeRememberTree = v;
    }

    /**
      Get Defines if the state of the TagTree (opened/closed nodes) is remebered (stored/restored).
    */
    static
    bool tagTreeRememberTree()
    {
      return self()->mTagTreeRememberTree;
    }

    /**
      Set Defines if the filter of the TagTree is remembered (stored/restored).
    */
    static
    void setTagTreeRememberFilter( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "TagTreeRememberFilter" ) ))
        self()->mTagTreeRememberFilter = v;
    }

    /**
      Get Defines if the filter of the TagTree is remembered (stored/restored).
    */
    static
    bool tagTreeRememberFilter()
    {
      return self()->mTagTreeRememberFilter;
    }

    /**
      Set Defines if the filter of tags, that are marked secret, should be off by default.
    */
    static
    void setTagTreeUnsetSecretFilter( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "TagTreeUnsetSecretFilter" ) ))
        self()->mTagTreeUnsetSecretFilter = v;
    }

    /**
      Get Defines if the filter of tags, that are marked secret, should be off by default.
    */
    static
    bool tagTreeUnsetSecretFilter()
    {
      return self()->mTagTreeUnsetSecretFilter;
    }

    /**
      Set Defines if the tagtree is locked or not.
    */
    static
    void setTagTreeLocked( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "TagTreeLocked" ) ))
        self()->mTagTreeLocked = v;
    }

    /**
      Get Defines if the tagtree is locked or not.
    */
    static
    bool tagTreeLocked()
    {
      return self()->mTagTreeLocked;
    }

    /**
      Set The size of the icons in the ToolBar of the SourceDir.
    */
    static
    void setSourceDirTreeToolBarIconSize( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "SourceDirTreeToolBarIconSize" ) ))
        self()->mSourceDirTreeToolBarIconSize = v;
    }

    /**
      Get The size of the icons in the ToolBar of the SourceDir.
    */
    static
    int sourceDirTreeToolBarIconSize()
    {
      return self()->mSourceDirTreeToolBarIconSize;
    }

    /**
      Set The size of the icons in the SourceDirTree.
    */
    static
    void setSourceDirTreeIconSize( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "SourceDirTreeIconSize" ) ))
        self()->mSourceDirTreeIconSize = v;
    }

    /**
      Get The size of the icons in the SourceDirTree.
    */
    static
    int sourceDirTreeIconSize()
    {
      return self()->mSourceDirTreeIconSize;
    }

    /**
      Set The font used in the SourceDirTree.
    */
    static
    void setSourceDirTreeFont( const QFont & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "SourceDirTreeFont" ) ))
        self()->mSourceDirTreeFont = v;
    }

    /**
      Get The font used in the SourceDirTree.
    */
    static
    QFont sourceDirTreeFont()
    {
      return self()->mSourceDirTreeFont;
    }

    /**
      Set Defines if the icons in the SourceDirTree are shown.
    */
    static
    void setSourceDirTreeShowIcons( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "SourceDirTreeShowIcons" ) ))
        self()->mSourceDirTreeShowIcons = v;
    }

    /**
      Get Defines if the icons in the SourceDirTree are shown.
    */
    static
    bool sourceDirTreeShowIcons()
    {
      return self()->mSourceDirTreeShowIcons;
    }

    /**
      Set Defines if the state of the SourceDirTree (opened/closed nodes) is remebered (stored/restored).
    */
    static
    void setSourceDirTreeRememberTree( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "SourceDirTreeRememberTree" ) ))
        self()->mSourceDirTreeRememberTree = v;
    }

    /**
      Get Defines if the state of the SourceDirTree (opened/closed nodes) is remebered (stored/restored).
    */
    static
    bool sourceDirTreeRememberTree()
    {
      return self()->mSourceDirTreeRememberTree;
    }

    /**
      Set Defines if the filter of the SourceDirTree is remembered (stored/restored).
    */
    static
    void setSourceDirTreeRememberFilter( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "SourceDirTreeRememberFilter" ) ))
        self()->mSourceDirTreeRememberFilter = v;
    }

    /**
      Get Defines if the filter of the SourceDirTree is remembered (stored/restored).
    */
    static
    bool sourceDirTreeRememberFilter()
    {
      return self()->mSourceDirTreeRememberFilter;
    }

    /**
      Set The size of the image previews.
    */
    static
    void setImagePreviewSize( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImagePreviewSize" ) ))
        self()->mImagePreviewSize = v;
    }

    /**
      Get The size of the image previews.
    */
    static
    int imagePreviewSize()
    {
      return self()->mImagePreviewSize;
    }

    /**
      Set The font used in the ImagePreview.
    */
    static
    void setImagePreviewFont( const QFont & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImagePreviewFont" ) ))
        self()->mImagePreviewFont = v;
    }

    /**
      Get The font used in the ImagePreview.
    */
    static
    QFont imagePreviewFont()
    {
      return self()->mImagePreviewFont;
    }

    /**
      Set Defines if the name of the file is shown.
    */
    static
    void setImagePreviewShowName( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImagePreviewShowName" ) ))
        self()->mImagePreviewShowName = v;
    }

    /**
      Get Defines if the name of the file is shown.
    */
    static
    bool imagePreviewShowName()
    {
      return self()->mImagePreviewShowName;
    }

    /**
      Set Defines if the preview is refreshed autiomatically if the user changes something.
    */
    static
    void setImagePreviewAutoRefresh( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImagePreviewAutoRefresh" ) ))
        self()->mImagePreviewAutoRefresh = v;
    }

    /**
      Get Defines if the preview is refreshed autiomatically if the user changes something.
    */
    static
    bool imagePreviewAutoRefresh()
    {
      return self()->mImagePreviewAutoRefresh;
    }

    /**
      Set Defines the selectionmode for the image previews.
    */
    static
    void setImagePreviewSelectionMode( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImagePreviewSelectionMode" ) ))
        self()->mImagePreviewSelectionMode = v;
    }

    /**
      Get Defines the selectionmode for the image previews.
    */
    static
    int imagePreviewSelectionMode()
    {
      return self()->mImagePreviewSelectionMode;
    }

    /**
      Set Contains the regularexpressions for files to handle.
    */
    static
    void setFileFilterFileToHandle( const QStringList & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "FileFilterFileToHandle" ) ))
        self()->mFileFilterFileToHandle = v;
    }

    /**
      Get Contains the regularexpressions for files to handle.
    */
    static
    QStringList fileFilterFileToHandle()
    {
      return self()->mFileFilterFileToHandle;
    }

    /**
      Set Contains the regularexpressions for subdirectories to ignore.
    */
    static
    void setFileFilterSubdirsToIgnore( const QStringList & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "FileFilterSubdirsToIgnore" ) ))
        self()->mFileFilterSubdirsToIgnore = v;
    }

    /**
      Get Contains the regularexpressions for subdirectories to ignore.
    */
    static
    QStringList fileFilterSubdirsToIgnore()
    {
      return self()->mFileFilterSubdirsToIgnore;
    }

    /**
      Set Defines, if the internal image viewer is used to view images, rather then an external tool
    */
    static
    void setToolsUseInternalImageViewer( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ToolsUseInternalImageViewer" ) ))
        self()->mToolsUseInternalImageViewer = v;
    }

    /**
      Get Defines, if the internal image viewer is used to view images, rather then an external tool
    */
    static
    bool toolsUseInternalImageViewer()
    {
      return self()->mToolsUseInternalImageViewer;
    }

    /**
      Set Contains the external to open an image with when doubleclicked.
    */
    static
    void setToolsDefaultExternalTool( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ToolsDefaultExternalTool" ) ))
        self()->mToolsDefaultExternalTool = v;
    }

    /**
      Get Contains the external to open an image with when doubleclicked.
    */
    static
    QString toolsDefaultExternalTool()
    {
      return self()->mToolsDefaultExternalTool;
    }

    /**
      Set Contains the list of tools an image can be opened with.
    */
    static
    void setToolsExternalTools( const QStringList & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ToolsExternalTools" ) ))
        self()->mToolsExternalTools = v;
    }

    /**
      Get Contains the list of tools an image can be opened with.
    */
    static
    QStringList toolsExternalTools()
    {
      return self()->mToolsExternalTools;
    }

    /**
      Set Should the internal viewer use (slower) smooth scaling, or fast scaling algorithms?
    */
    static
    void setToolsViewerUseSmoothScaling( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ToolsViewerUseSmoothScaling" ) ))
        self()->mToolsViewerUseSmoothScaling = v;
    }

    /**
      Get Should the internal viewer use (slower) smooth scaling, or fast scaling algorithms?
    */
    static
    bool toolsViewerUseSmoothScaling()
    {
      return self()->mToolsViewerUseSmoothScaling;
    }

    /**
      Set Should the image counter be shown in the image viewer?
    */
    static
    void setToolsViewerShowImageCounter( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ToolsViewerShowImageCounter" ) ))
        self()->mToolsViewerShowImageCounter = v;
    }

    /**
      Get Should the image counter be shown in the image viewer?
    */
    static
    bool toolsViewerShowImageCounter()
    {
      return self()->mToolsViewerShowImageCounter;
    }

    /**
      Set Should fileinfos (name etc.) be shown in the image viewer?
    */
    static
    void setToolsViewerShowFileInfos( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ToolsViewerShowFileInfos" ) ))
        self()->mToolsViewerShowFileInfos = v;
    }

    /**
      Get Should fileinfos (name etc.) be shown in the image viewer?
    */
    static
    bool toolsViewerShowFileInfos()
    {
      return self()->mToolsViewerShowFileInfos;
    }

    /**
      Set The color the overlay is drawn with in the image viewer.
    */
    static
    void setToolsViewerOverlayColor( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ToolsViewerOverlayColor" ) ))
        self()->mToolsViewerOverlayColor = v;
    }

    /**
      Get The color the overlay is drawn with in the image viewer.
    */
    static
    QString toolsViewerOverlayColor()
    {
      return self()->mToolsViewerOverlayColor;
    }

    /**
      Set Contains the last opened kphotobook file.
    */
    static
    void setFileSystemLastOpenedFile( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "FileSystemLastOpenedFile" ) ))
        self()->mFileSystemLastOpenedFile = v;
    }

    /**
      Get Contains the last opened kphotobook file.
    */
    static
    QString fileSystemLastOpenedFile()
    {
      return self()->mFileSystemLastOpenedFile;
    }

    /**
      Set Contains the last added source directory.
    */
    static
    void setFileSystemLastAddedSourcedir( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "FileSystemLastAddedSourcedir" ) ))
        self()->mFileSystemLastAddedSourcedir = v;
    }

    /**
      Get Contains the last added source directory.
    */
    static
    QString fileSystemLastAddedSourcedir()
    {
      return self()->mFileSystemLastAddedSourcedir;
    }

    /**
      Set Contains the last directory images were exported to.
    */
    static
    void setFileSystemLastExportedToDirectory( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "FileSystemLastExportedToDirectory" ) ))
        self()->mFileSystemLastExportedToDirectory = v;
    }

    /**
      Get Contains the last directory images were exported to.
    */
    static
    QString fileSystemLastExportedToDirectory()
    {
      return self()->mFileSystemLastExportedToDirectory;
    }

    /**
      Set Contains the Sourcefolder setting of the ImageImporter.
    */
    static
    void setImageImporterSourceFolder( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImageImporterSourceFolder" ) ))
        self()->mImageImporterSourceFolder = v;
    }

    /**
      Get Contains the Sourcefolder setting of the ImageImporter.
    */
    static
    QString imageImporterSourceFolder()
    {
      return self()->mImageImporterSourceFolder;
    }

    /**
      Set Contains the Sourcefilename regexp setting of the ImageImporter.
    */
    static
    void setImageImporterSourceFilenameRegexp( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImageImporterSourceFilenameRegexp" ) ))
        self()->mImageImporterSourceFilenameRegexp = v;
    }

    /**
      Get Contains the Sourcefilename regexp setting of the ImageImporter.
    */
    static
    QString imageImporterSourceFilenameRegexp()
    {
      return self()->mImageImporterSourceFilenameRegexp;
    }

    /**
      Set SourceIncludeSubfolders
    */
    static
    void setImageImporterSourceIncludeSubfolders( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImageImporterSourceIncludeSubfolders" ) ))
        self()->mImageImporterSourceIncludeSubfolders = v;
    }

    /**
      Get SourceIncludeSubfolders
    */
    static
    bool imageImporterSourceIncludeSubfolders()
    {
      return self()->mImageImporterSourceIncludeSubfolders;
    }

    /**
      Set Contains the last sourcedevide of the ImageImporter.
    */
    static
    void setImageImporterSourceDevice( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImageImporterSourceDevice" ) ))
        self()->mImageImporterSourceDevice = v;
    }

    /**
      Get Contains the last sourcedevide of the ImageImporter.
    */
    static
    QString imageImporterSourceDevice()
    {
      return self()->mImageImporterSourceDevice;
    }

    /**
      Set Contains, if images should be Archived, too.
    */
    static
    void setImageImporterArchiveImages( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImageImporterArchiveImages" ) ))
        self()->mImageImporterArchiveImages = v;
    }

    /**
      Get Contains, if images should be Archived, too.
    */
    static
    bool imageImporterArchiveImages()
    {
      return self()->mImageImporterArchiveImages;
    }

    /**
      Set This is the Base folder, where archive images are moved to.
    */
    static
    void setImageImporterArchiveBaseFolder( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImageImporterArchiveBaseFolder" ) ))
        self()->mImageImporterArchiveBaseFolder = v;
    }

    /**
      Get This is the Base folder, where archive images are moved to.
    */
    static
    QString imageImporterArchiveBaseFolder()
    {
      return self()->mImageImporterArchiveBaseFolder;
    }

    /**
      Set This is the way the subfolders are named in the Archive base folder.
    */
    static
    void setImageImporterArchiveSubfolders( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImageImporterArchiveSubfolders" ) ))
        self()->mImageImporterArchiveSubfolders = v;
    }

    /**
      Get This is the way the subfolders are named in the Archive base folder.
    */
    static
    QString imageImporterArchiveSubfolders()
    {
      return self()->mImageImporterArchiveSubfolders;
    }

    /**
      Set This is how the files will be called in the archive Subfolders.
    */
    static
    void setImageImporterArchiveFilename( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImageImporterArchiveFilename" ) ))
        self()->mImageImporterArchiveFilename = v;
    }

    /**
      Get This is how the files will be called in the archive Subfolders.
    */
    static
    QString imageImporterArchiveFilename()
    {
      return self()->mImageImporterArchiveFilename;
    }

    /**
      Set Do you want to lowercase all images in the Archive folder?
    */
    static
    void setImageImporterArchiveLowercaseFilenames( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImageImporterArchiveLowercaseFilenames" ) ))
        self()->mImageImporterArchiveLowercaseFilenames = v;
    }

    /**
      Get Do you want to lowercase all images in the Archive folder?
    */
    static
    bool imageImporterArchiveLowercaseFilenames()
    {
      return self()->mImageImporterArchiveLowercaseFilenames;
    }

    /**
      Set This is the base folder of the importet images in the albums.
    */
    static
    void setImageImporterDestBaseFolder( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImageImporterDestBaseFolder" ) ))
        self()->mImageImporterDestBaseFolder = v;
    }

    /**
      Get This is the base folder of the importet images in the albums.
    */
    static
    QString imageImporterDestBaseFolder()
    {
      return self()->mImageImporterDestBaseFolder;
    }

    /**
      Set This is how the subfolders in the dest are called.
    */
    static
    void setImageImporterDestSubfolders( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImageImporterDestSubfolders" ) ))
        self()->mImageImporterDestSubfolders = v;
    }

    /**
      Get This is how the subfolders in the dest are called.
    */
    static
    QString imageImporterDestSubfolders()
    {
      return self()->mImageImporterDestSubfolders;
    }

    /**
      Set This is how the files in the dest subfolders will be called.
    */
    static
    void setImageImporterDestFilenames( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImageImporterDestFilenames" ) ))
        self()->mImageImporterDestFilenames = v;
    }

    /**
      Get This is how the files in the dest subfolders will be called.
    */
    static
    QString imageImporterDestFilenames()
    {
      return self()->mImageImporterDestFilenames;
    }

    /**
      Set Should the files be all lowercase in the dest folder?
    */
    static
    void setImageImporterDestLowercaseFilenames( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ImageImporterDestLowercaseFilenames" ) ))
        self()->mImageImporterDestLowercaseFilenames = v;
    }

    /**
      Get Should the files be all lowercase in the dest folder?
    */
    static
    bool imageImporterDestLowercaseFilenames()
    {
      return self()->mImageImporterDestLowercaseFilenames;
    }

    static
    void writeConfig()
    {
      static_cast<KConfigSkeleton*>(self())->writeConfig();
    }
  protected:
    Settings();
    static Settings *mSelf;


    // General
    int mGeneralViewMode;
    bool mGeneralRescanWhileStartup;
    bool mGeneralCheckUntaggedOnExit;

    // TagTree
    int mTagTreeToolBarIconSize;
    int mTagTreeIconSize;
    QFont mTagTreeFont;
    bool mTagTreeShowIcons;
    bool mTagTreeBoldMatches;
    bool mTagTreeBoldMatchesCollapsedOnly;
    int mTagTreeFilterOperator;
    bool mTagTreeFilterRegexp;
    bool mTagTreeRememberTree;
    bool mTagTreeRememberFilter;
    bool mTagTreeUnsetSecretFilter;
    bool mTagTreeLocked;

    // SourceDirTree
    int mSourceDirTreeToolBarIconSize;
    int mSourceDirTreeIconSize;
    QFont mSourceDirTreeFont;
    bool mSourceDirTreeShowIcons;
    bool mSourceDirTreeRememberTree;
    bool mSourceDirTreeRememberFilter;

    // ImagePreview
    int mImagePreviewSize;
    QFont mImagePreviewFont;
    bool mImagePreviewShowName;
    bool mImagePreviewAutoRefresh;
    int mImagePreviewSelectionMode;

    // FileFilter
    QStringList mFileFilterFileToHandle;
    QStringList mFileFilterSubdirsToIgnore;

    // Tools
    bool mToolsUseInternalImageViewer;
    QString mToolsDefaultExternalTool;
    QStringList mToolsExternalTools;
    bool mToolsViewerUseSmoothScaling;
    bool mToolsViewerShowImageCounter;
    bool mToolsViewerShowFileInfos;
    QString mToolsViewerOverlayColor;

    // FileSystem
    QString mFileSystemLastOpenedFile;
    QString mFileSystemLastAddedSourcedir;
    QString mFileSystemLastExportedToDirectory;

    // ImageImporter
    QString mImageImporterSourceFolder;
    QString mImageImporterSourceFilenameRegexp;
    bool mImageImporterSourceIncludeSubfolders;
    QString mImageImporterSourceDevice;
    bool mImageImporterArchiveImages;
    QString mImageImporterArchiveBaseFolder;
    QString mImageImporterArchiveSubfolders;
    QString mImageImporterArchiveFilename;
    bool mImageImporterArchiveLowercaseFilenames;
    QString mImageImporterDestBaseFolder;
    QString mImageImporterDestSubfolders;
    QString mImageImporterDestFilenames;
    bool mImageImporterDestLowercaseFilenames;

  private:
};

#endif

